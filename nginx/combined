##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
#
# SSL configuration
#
# listen 443 ssl default_server;
# listen [::]:443 ssl default_server;
#
# Note: You should disable gzip for SSL traffic.
# See: https://bugs.debian.org/773332
#
# Read up on ssl_ciphers to ensure a secure configuration.
# See: https://bugs.debian.org/765782
#
# Self signed certs generated by the ssl-cert package
# Don't use them in a production server!
#
# include snippets/snakeoil.conf;
#
# SUMMARY
# https://dweb.me (secure server) proxypass http://dweb.me (research server)
# https://dweb.archive.org (secure server) proxypass http://dweb.archive.org (research server) << I think - but dont have config file
# http://dweb.me/ -> https://dweb.me/
#
# http://dweb.archive.org/aaa/xxx -> gateway /arc/archive.org/aaa/xxx
# https://{gateway.dweb.me, dweb.me}/ -> https://dweb.archive.org  - exact URL only
# https://{gateway.dweb.me, dweb.me}/ proxypass localhost:4244 (gateway python)
# https://{gateway.dweb.me, dweb.me, dweb.archive.org}/{archive,examples} -> file
# http://dweb.archive.org/{details,search} -> bootloader
# https://{gateway.dweb.me, dweb.me}/arc/archive.org/{details,search} -> bootloader
# https://{dweb.me, gateway.dweb.me, dweb.archive.org}/{ws,wss} proxypass localhost:4002 (websockets for IPFS) - not yet working
# https://dweb.archive.org/{about, donate, projects} -> https://archive.org/{about,donate,projects}
# https://{gatgeway.dweb.me, dweb.me}/arc/archive.org/{about, donate, projects} -> https://archive.org/{about,donate,projects}
# https://{dweb.me, gateway}/arc/archive.org/download/xxx -> /arc/archive.org/details/xxx?download=1##
# https://{dweb.archive.org}/download/xxx -> /details/xxx?download=1
##

####
#### THE SITES gateway.dweb.me & dweb.me ARE ALMOST IDENTICAL, ITS HIGHLY LIKEY ANY CHANGES HERE NEED TO BE MADE ON THE OTHER SITE
####

server {
    listen 0.0.0.0:80;
    server_name dweb.me;
    server_name gateway.dweb.me;
    rewrite ^ https://$http_host$request_uri? permanent;    # force redirect http to https
    # Exact root URL - Forward root URL to dweb.archive.org, shouldnt be hitting it here - probably a crawler
    location ~ ^/$ {
        return 301 https://dweb.archive.org/;
    }
}

# Default server configuration
#
server {
	listen 443 http2;

    server_name dweb.me;
	ssl on;
	ssl_certificate /etc/letsencrypt/live/dweb.me/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/dweb.me/privkey.pem;

    # Exact root URL - on dweb.me or gateway.dweb.me redirect to https://dweb.archive.org so client uses https, most of these are going to be crawlers/hackers
    location ~ ^/$ {
        return 301 https://dweb.archive.org/;
    }

    include include_root;                # Patterns the same on all servers

    include include_arc_archive;         # Patterns that are rewritten then assume same on all servers last pattern routes to @gateway

    # Look for an exact match, but if not found then redirect to gateway
	location / {
	    try_files $uri /archive$uri @gateway;
    }
}
server {
	listen 443 http2;

    server_name gateway.dweb.me;
	ssl on;
	ssl_certificate /etc/letsencrypt/live/gateway.dweb.me/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/gateway.dweb.me/privkey.pem;

    # Exact root URL - on dweb.me or gateway.dweb.me redirect to https://dweb.archive.org so client uses https, most of these are going to be crawlers/hackers
    location ~ ^/$ {
        return 301 https://dweb.archive.org/;
    }

    include include_root;                # Patterns the same on all servers

    include include_arc_archive;         # Patterns that are rewritten then assume same on all servers last pattern routes to @gateway

    # Look for an exact match, but if not found then redirect to gateway
	location / {
	    try_files $uri /archive$uri @gateway;
    }
}
# dweb.archive.org listens on 80 because its proxyed by the haproxy or nginx on dweb.archive.org which has the dweb.archive.org certs over to the research machine which doesnt
server {
	listen 80 http2;

    server_name dweb.archive.org;

    # Exact root goes to bootloader
    location ~ ^/$ {
        add_header Access-Control-Allow-Origin *;
        try_files /archive/bootloader.html =404;
    }

    include include_root;                # Patterns the same on all servers
    # Look for exact match for file either in root directory or in /archive
	location / {
	    try_files $uri /archive$uri;
    }
    rewrite (.*)  /arc/archive.org$1 break; # On dweb.archive.org rewrite it to /arc/archive.org/...
    include include_arc_archive;         # Patterns that are rewritten then assume same on all servers last pattern routes to @gateway

    @rewritegateway {
        # TODO I'm not sure if this is the correct syntax
        @gateway
    }
}


server {
    listen 4245;
	root /var/www/html;
    server_name dweb.me;
	ssl on;
	ssl_certificate /etc/letsencrypt/live/dweb.me/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/dweb.me/privkey.pem;

    # Tunnel websocket
    location /  {
        proxy_pass http://localhost:4002;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}
